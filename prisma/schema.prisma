// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum Role {
    ADMIN
    USER
}

model User {
    id            String          @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?         @unique
    emailVerified DateTime?
    role          Role            @default(USER)
    image         String?
    accounts      Account[]
    sessions      Session[]
    Authenticator Authenticator[] // Optional for WebAuthn support

    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    Appointment   Appointment[]
    Payment       Payment[]
    Code          Code[]
    TestPurchases TestPurchase[]
    Response      TestResponse[]
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

model Authenticator {
    credentialID         String  @id @map("_id")
    userId               String  @db.ObjectId
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, credentialID])
}

enum ServiceType {
    INDIVIDUAL
    COUPLE
}

model Service {
    id              String      @id @default(auto()) @map("_id") @db.ObjectId
    name            String
    slug            String      @unique
    type            ServiceType
    sessions        Int
    price           Float
    perSessionPrice Float
    features        String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Status {
    SCHEDULED
    CANCELED
    COMPLETED
}

enum PaymentStatus {
    PENDING
    COMPLETE
}

model Appointment {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String   @db.ObjectId
    orderId   String
    name      String
    email     String
    contact   String // Prisma does not have a specific Number type for phone numbers; use String instead
    date      DateTime
    time      String
    // address String
    // city    String
    // state   String
    // zip     String // Use String to accommodate zip codes with leading zeros
    status    Status   @default(SCHEDULED)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
    id                String @id @default(auto()) @map("_id") @db.ObjectId
    userId            String @db.ObjectId
    orderId           String
    razorpayPaymentId String @map("razorpay_payment_id")
    razorpayOrderId   String @map("razorpay_order_id")
    razorpaySignature String @map("razorpay_signature")
    amount            Int
    currency          String
    type              String
    status            String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([orderId])
}

model Code {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    code   Int    @unique
    test   String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, code])
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

enum Area {
    METRO
    URBAN
    RURAL
}

enum SchoolType {
    GOVERNMENT
    PRIVATE
    AIDED
    BOYS_ONLY
    GIRLS_ONLY
    COMBINED
}

model Patient {
    id     String    @id @default(auto()) @map("_id") @db.ObjectId
    name   String?
    // fatherName            String?
    // familyName            String?
    dob    DateTime?
    gender Gender
    // class                 String?
    // subject1              String?
    // subject2              String?
    // subject3              String?
    // subject4              String?
    // subject5              String?
    // subject6              String?
    // institution           String?
    // place                 String?
    // area                  Area
    // schoolType            SchoolType
    // academicQualification String?
    // religion              String?
    // fathersOccupation     String?
    // fathersIncome         String?
    // address               String?
    test   String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Test {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    slug        String? @unique
    description String
    price       Float

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model TestPurchase {
    id      String  @id @default(auto()) @map("_id") @db.ObjectId
    userId  String  @db.ObjectId
    orderId String
    name    String
    email   String?
    contact String // Use String instead of Number
    age     String
    gender  Gender
    test    String
    // address       String
    // city          String
    // state         String
    // zip           String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TestResponse {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String   @db.ObjectId
    test      Json?
    response  Json?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    slug        String  @unique
    description String
    price       Float
    category    String
    inStock     Boolean @default(true)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
